<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picIconBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>