<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADdUAAA3VAT3WWPEAAAAGYktHRAAAAAAAAPlDu38AAAAJdnBBZwAAADAAAAAwAM7u
        jFcAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTAtMDUtMjRUMDc6NDI6MjktMDY6MDCpLlW9AAAAJXRFWHRk
        YXRlOm1vZGlmeQAyMDEwLTA1LTI0VDA3OjQyOjI5LTA2OjAw2HPtAQAAADV0RVh0TGljZW5zZQBodHRw
        Oi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9MR1BMLzIuMS87wbQYAAAAGXRFWHRTb2Z0d2Fy
        ZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAA90RVh0U291cmNlAG51b3ZlWFQy6iA23AAAACJ0RVh0U291
        cmNlX1VSTABodHRwOi8vbnVvdmV4dC5wd3NwLm5ldJGJxy0AAApGSURBVGhD7VprcFTlGd5sSIglCQnD
        JVITBCRKUNEqIxcVFbyAyk1QBBRRR/AGKIiADiK2f1r9ZS0XQZGKRUHl0lLIIANNaDAXsrvJZm8h2ZDQ
        Xw4yU8BIE94+z7fn25ycnGw2QKg/ujPPfCfn7J7zvO/3vJfvO3E4/v9p8cC6hASHgQSM3YCrgB5AMuDU
        138xPiOhj8BmrcPR408OxzBgJv5ejfEzYC/OHwQOAfn4eweufQAswPEYnOu9zuFIwHjlP3woPYoxF2QW
        Ytz3cUrKv/7cv//5HTfdJH8bO1a+mzRJDs2YIYcff1wOTpki++6/X769/Xb5y6BBzZvS039c53SW4bd/
        AO6GIb8y7tm1xtDj651Oei0PD/79+qSk41sHDGje/9BDUvrSS1L15psSXLlSgkuXSnDRIgksXCiBV14R
        P64FXn1VgrjuB1y4dhjG0diNqak/4l5fAxNhSEqXzAiJKw85HBl40KJ13bqFtuXmXih86inxv/WWhN54
        Q/wvvihVzz4r3rlzxfv00y3AdyqJOXMUvDiueuYZZVhgxQope/ll2T16NA05jXtvpHO+zclRsXRZPpo8
        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
</value>
  </data>
</root>